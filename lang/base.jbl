(def {nil} ())
(def {else} #t)

(fun {nil? x} {(equal? nil x)})
(fun {empty? lst} {(= 0 (len lst))})

(fun {> x y} {(< y x)})
(fun {>= x y} {(not (< x y))})
(fun {<= x y} {(not (< y x))})
(fun {!= x y} {(not (= y x))})

(fun {foldl op init lst} {
    (if (empty? lst)
        {init}
        {(fold op (op init (head lst)) (tail lst))})})

(fun {fold op init lst} {
   (fun {fold-rec rest} {
       (if (empty? rest)
           {init}
           {(op (head rest) (fold-rec (tail rest)))})})
   (fold-rec lst)})

(fun {map op lst}
     {(fold (\ {x acc} {(cons (op x) acc)}) {} lst)})

(fun {do exprs} {((\ {} exprs))})

; Used to create a new lexical scope with the given bindings
; (let {(x (+ 3 4)) (y 6)} {(*x y)})
(fun {let vars body} {
    ((\ {v b}
        {(apply (\ (map head vars) body)
                (map (\ {v} {(nth v 1)}) vars))})
     vars body)})

; Like lets, put temporarily changes a global binding instead of creating
; a new lexical binding
(fun {let* vars body} {
    (let {(let*-saved (map (\ {v} {(eval (head v))}) vars))
          (let*-symbols (map head vars))
          (let*-vals (map (\ {v} {(do (tail v))}) vars))}
         {(apply def* (join (list let*-symbols) let*-vals))
          (def {result} body)
          (apply def* (join (list let*-symbols) let*-saved))
          result})})
