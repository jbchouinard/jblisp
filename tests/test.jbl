(fun {assert-not pred msg} {(assert (not pred) msg)})
(fun {assert-equal v1 v2 msg} {(assert (equal? v1 v2) msg)})

; Eval tests
1
1.23
{}
{{}}
{{1 2 3} {3 4 5}}
"foo"
#f
#t

; Identity tests
(assert-equal 1 1 "1 is not equal to 1")
(assert-equal 1.0 1.0 "1.0 is not equal to 1.0")
(assert-equal () () "Empty s-expr not equal to itself")
(assert-equal {} {} "Empty q-expr not equal to itself")
(assert (equal? {1 2} {1 2}) "q-expr {1 2} not equal to itself")

; Arithmetic tests
(assert (= 5 (+ 1 4)) "Addition is broken")
(assert (= 1 (- 8 7)) "Subtraction is broken")
(assert-equal (not #t) #f "Not true should be false")
(assert-equal (not #f) #t "Not false should be true")
(assert (< 8 10) "8 should be less than 10")
(assert-not (< 100.5 10) "100.5 should not be less than 10")
(assert (> 100.5 10) "100.5 should be greater than 10")
(assert (= 25 25) "25 should be = 25")
(assert (<= 25 25) "25 should be <= 25")
(assert (>= 25 25) "25 should be >= 25")

; Lambda tests
(def {x} 4)
(def {y} 7)
(assert (= (+ x y) 11) "Addition of vars is broken")
(def {f} (\ {x y} {(* x y)}))
(assert (= (f 3 9) 27) "(f 3 9) should evaluate to 27")
(def {f} (\ {x} {(\ {y} {(+ x y)})}))
(def {g} (f 1000))
(assert (= 1112 (g 112)) "g should evaluate to 1112")
(def {h} (f 100))
(assert (= 1112 (g 112)) "g should still evaluate to 1112")
(assert (= 212 (h 112)) "h should still evaluate to 212")

; Closure tests
(def {z} 100)
(fun {f x} {(\ {y} {(+ x y z)})})
(fun {g} {(def {z} 100)
          (f 10)})
(assert (= 111 ((g) 1)) "Closures are broken")

(def {z} 200)
(def {f} (\ {x} {(\ {y} {(+ x y z)})}))
(assert-equal 214 ((f 4) 10) "Closures are broken 2")
(def {g} (\ {z} {((f 4) 10)}))
(assert-equal 214 (g 20) "Closures are broken 3")

(def {f} (\ {} {
    (def {z} 100)
    (def {g} (\ {} {(* 2 z)}))
    (def {z} 200)
    g
    }))
(assert-equal 400 ((f)) "Closures are broken 4")

; String tests
(assert-equal "foo" "foo"
    "Strings of same value should be equal")
(assert-not (equal? "foo" "bar")
    "Strings of different values should NOT be equal")
(assert-equal "foobar" (concat "foo" "bar")
    "Error in string concatenation")

; Conditionals tests
(def {x} "foo")
(assert-equal 1 (if #t {1} {(def {x} "bar")})
    "IF: Should evaluate to 1.")
(assert-equal x "foo"
    "IF: Should evaluate 1st statement only")
(assert-equal 7 (if #f {(def {x} "bar")} {(+ 3 4)})
    "IF: Should evaluate to 3+4.")
(assert-equal x "foo"
    "IF: Should evaluate 2nd statement only")
(assert-equal "foo" (cond {#t "foo"} {#t "bar"})
    "COND: Should evaluate to 'foo'")
(assert-equal "bar" (cond {#f "bar"} {#t "bar"})
    "COND: Should evaluate to 'foo'")
(assert-equal "baz" (cond {#f "foo"} {#f "bar"} {esle "baz"})
    "COND: Should evaluate to 'baz'")

; Let
(assert-equal 17 (let {(x 5) (y 12)} {(+ x y)})
    "LET: Should evaluate to 17")
(assert-equal 25 (let {(m 12)} {(let {(n 13)} {(+ m n)})})
    "LET: Should evaluate to 25")
