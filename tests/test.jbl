(fun {assert-not pred n} {(assert (not pred) n)})

(assert (equal? 1 1) "1 is not equal to 1")
(assert (equal? 1.0 1.0) "1.0 is not equal to 1.0")
(assert (equal? () ()) "Empty s-expr not equal to itself")
(assert (equal? {} {}) "Empty q-expr not equal to itself")
(assert (equal? {1 2} {1 2}) "q-expr {1 2} not equal to itself")

(assert (= 5 (+ 1 4)) "Addition is broken")
(assert (= 1 (- 8 7)) "Subtraction is broken")
(assert (equal? (not #t) #f) "Not true should be false")
(assert (equal? (not #f) #t) "Not false should be true")
(assert (< 8 10) "8 should be less than 10")
(assert-not (< 100.5 10) "100.5 should not be less than 10")
(assert (> 100.5 10) "100.5 should be greater than 10")
(assert (= 25 25) "25 should be = 25")
(assert (<= 25 25) "25 should be <= 25")
(assert (>= 25 25) "25 should be >= 25")

(def {x} 4)
(def {y} 7)
(assert (= (+ x y) 11) "Addition of vars is broken")
(def {f} (\ {x y} {(* x y)}))
(assert (= (f 3 9) 27) "This should evaluate to 27")
(def {f} (\ {x} {(\ {y} {(+ x y)})}))
(def {g} (f 1000))
(assert (= 1112 (g 112)) "This should evaluate to 1112")
(def {h} (f 100))
(assert (= 1112 (g 112)) "This should still evaluate to 1112")
(assert (= 212 (h 112)) "This should still evaluate to 212")

(def {z} 100)
(fun {f x} {(\ {y} {(+ x y z)})})
(fun {g} {(def {z} 100)
          (f 10)})
(assert (= 111 ((g) 1)) "Closures are broken")
